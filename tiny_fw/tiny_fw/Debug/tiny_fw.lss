
tiny_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .program1     0000005a  00000800  00000800  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000040c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000002  00800060  0000040c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000075  00800062  00800062  0000051c  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d0f  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006dc  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000070c  00000000  00000000  00001a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00002138  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004b8  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007fd  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  0000300d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .program1:

00000800 <program1>:
	*x = dst;
}

void program1(void) __attribute__ ((section (".program1")));

void program1(void){
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	00 d0       	rcall	.+0      	; 0x806 <program1+0x6>
 806:	00 d0       	rcall	.+0      	; 0x808 <program1+0x8>
 808:	1f 92       	push	r1
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data_eeprom = 0x01;
 80e:	11 e0       	ldi	r17, 0x01	; 1
 810:	19 83       	std	Y+1, r17	; 0x01
	//GIMSK |= 1<<PCIE;
	
	//PCMSK |= 1<<PCINT2;
	writeEEPROM(0x01, &data_eeprom, 1);
 812:	41 e0       	ldi	r20, 0x01	; 1
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	be 01       	movw	r22, r28
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	a6 dd       	rcall	.-1204   	; 0x36c <writeEEPROM>
	num_tx_bits = 0;
 820:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <num_tx_bits>

		//TIMSK |= 1<<OCIE0A;           // Enable output compare interrupt
	uint8_t data[] = {0x01,0x02,0xAA,0x55};
 824:	1a 83       	std	Y+2, r17	; 0x02
 826:	82 e0       	ldi	r24, 0x02	; 2
 828:	8b 83       	std	Y+3, r24	; 0x03
 82a:	8a ea       	ldi	r24, 0xAA	; 170
 82c:	8c 83       	std	Y+4, r24	; 0x04
 82e:	85 e5       	ldi	r24, 0x55	; 85
 830:	8d 83       	std	Y+5, r24	; 0x05
		if (data[0] == 0xB0){
			//togglePin(LED1_PIN);
		}
		//data[0] = rx_circ_buff[rx_circ_head-1];
		//UartSend(&temp_data, 1);
		data[1] = 0x0d;
 832:	1d e0       	ldi	r17, 0x0D	; 13
// 		if (num_tx_bits == 0){
 //			num_tx_bits = 20;
 //			TX_BUFF = 0xFFFCA;
 			//togglePin(LED1_PIN);
 //		}
		UartReceive(data, 1);
 834:	61 e0       	ldi	r22, 0x01	; 1
 836:	ce 01       	movw	r24, r28
 838:	02 96       	adiw	r24, 0x02	; 2
 83a:	b9 dc       	rcall	.-1678   	; 0x1ae <UartReceive>
		if (data[0] == 0xB0){
			//togglePin(LED1_PIN);
		}
		//data[0] = rx_circ_buff[rx_circ_head-1];
		//UartSend(&temp_data, 1);
		data[1] = 0x0d;
 83c:	1b 83       	std	Y+3, r17	; 0x03

		UartSend(data, 1);
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	ce 01       	movw	r24, r28
 842:	02 96       	adiw	r24, 0x02	; 2
 844:	9b dc       	rcall	.-1738   	; 0x17c <UartSend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 846:	2f ef       	ldi	r18, 0xFF	; 255
 848:	84 e3       	ldi	r24, 0x34	; 52
 84a:	9c e0       	ldi	r25, 0x0C	; 12
 84c:	21 50       	subi	r18, 0x01	; 1
 84e:	80 40       	sbci	r24, 0x00	; 0
 850:	90 40       	sbci	r25, 0x00	; 0
 852:	e1 f7       	brne	.-8      	; 0x84c <program1+0x4c>
 854:	00 c0       	rjmp	.+0      	; 0x856 <program1+0x56>
 856:	00 00       	nop
 858:	ed cf       	rjmp	.-38     	; 0x834 <program1+0x34>

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	25 c1       	rjmp	.+586    	; 0x260 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e0       	ldi	r30, 0x0C	; 12
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 3d       	cpi	r26, 0xD7	; 215
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	a8 d1       	rcall	.+848    	; 0x3a2 <main>
  52:	da c1       	rjmp	.+948    	; 0x408 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <readPin>:
void function(int* x){
	uint8_t dst, src = (*x + 5);
	asm (	"mov %1, %0"
			: "=r" (dst)
			: "r" (src)	);
	*x = dst;
  56:	26 b3       	in	r18, 0x16	; 22
  58:	30 e0       	ldi	r19, 0x00	; 0
  5a:	a9 01       	movw	r20, r18
  5c:	02 c0       	rjmp	.+4      	; 0x62 <readPin+0xc>
  5e:	55 95       	asr	r21
  60:	47 95       	ror	r20
  62:	8a 95       	dec	r24
  64:	e2 f7       	brpl	.-8      	; 0x5e <readPin+0x8>
  66:	ca 01       	movw	r24, r20
  68:	81 70       	andi	r24, 0x01	; 1
  6a:	08 95       	ret

0000006c <__vector_1>:
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	8f 7b       	andi	r24, 0xBF	; 191
  7c:	8b bf       	out	0x3b, r24	; 59
  7e:	88 b7       	in	r24, 0x38	; 56
  80:	80 61       	ori	r24, 0x10	; 16
  82:	88 bf       	out	0x38, r24	; 56
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	8a bd       	out	0x2a, r24	; 42
  88:	83 bf       	out	0x33, r24	; 51
  8a:	12 be       	out	0x32, r1	; 50
  8c:	84 e3       	ldi	r24, 0x34	; 52
  8e:	89 bd       	out	0x29, r24	; 41
  90:	89 b7       	in	r24, 0x39	; 57
  92:	80 61       	ori	r24, 0x10	; 16
  94:	89 bf       	out	0x39, r24	; 57
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <starting>
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <GoToSleep>:
  a8:	85 b7       	in	r24, 0x35	; 53
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	85 bf       	out	0x35, r24	; 53
  ae:	88 95       	sleep
  b0:	85 b7       	in	r24, 0x35	; 53
  b2:	8f 7d       	andi	r24, 0xDF	; 223
  b4:	85 bf       	out	0x35, r24	; 53
  b6:	08 95       	ret

000000b8 <ConfigureCycleSleep>:
  b8:	91 e8       	ldi	r25, 0x81	; 129
  ba:	9c bd       	out	0x2c, r25	; 44
  bc:	12 be       	out	0x32, r1	; 50
  be:	92 e0       	ldi	r25, 0x02	; 2
  c0:	9a bd       	out	0x2a, r25	; 42
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	59 f0       	breq	.+22     	; 0xdc <ConfigureCycleSleep+0x24>
  c6:	28 f0       	brcs	.+10     	; 0xd2 <ConfigureCycleSleep+0x1a>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	69 f0       	breq	.+26     	; 0xe6 <ConfigureCycleSleep+0x2e>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	81 f0       	breq	.+32     	; 0xf0 <ConfigureCycleSleep+0x38>
  d0:	08 95       	ret
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	88 e6       	ldi	r24, 0x68	; 104
  d8:	89 bd       	out	0x29, r24	; 41
  da:	08 95       	ret
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	83 bf       	out	0x33, r24	; 51
  e0:	88 e6       	ldi	r24, 0x68	; 104
  e2:	89 bd       	out	0x29, r24	; 41
  e4:	08 95       	ret
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	83 bf       	out	0x33, r24	; 51
  ea:	84 e3       	ldi	r24, 0x34	; 52
  ec:	89 bd       	out	0x29, r24	; 41
  ee:	08 95       	ret
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	83 bf       	out	0x33, r24	; 51
  f4:	88 e6       	ldi	r24, 0x68	; 104
  f6:	89 bd       	out	0x29, r24	; 41
  f8:	08 95       	ret

000000fa <CycleSleep>:
  fa:	89 b7       	in	r24, 0x39	; 57
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	89 bf       	out	0x39, r24	; 57
 100:	d3 df       	rcall	.-90     	; 0xa8 <GoToSleep>
 102:	89 b7       	in	r24, 0x39	; 57
 104:	8f 7e       	andi	r24, 0xEF	; 239
 106:	89 bf       	out	0x39, r24	; 57
 108:	08 95       	ret

0000010a <UartSendByte>:
 10a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <receiving>
 10e:	91 11       	cpse	r25, r1
 110:	34 c0       	rjmp	.+104    	; 0x17a <UartSendByte+0x70>
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	9e 6f       	ori	r25, 0xFE	; 254
 11a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <TX_BUFF+0x1>
 11e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <TX_BUFF>
 122:	8a e0       	ldi	r24, 0x0A	; 10
 124:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <num_tx_bits>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	c6 df       	rcall	.-116    	; 0xb8 <ConfigureCycleSleep>
 12c:	1c bc       	out	0x2c, r1	; 44
 12e:	21 c0       	rjmp	.+66     	; 0x172 <UartSendByte+0x68>
 130:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <TX_BUFF>
 134:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <TX_BUFF+0x1>
 138:	80 ff       	sbrs	r24, 0
 13a:	04 c0       	rjmp	.+8      	; 0x144 <UartSendByte+0x3a>
 13c:	86 b3       	in	r24, 0x16	; 22
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	88 bb       	out	0x18, r24	; 24
 142:	03 c0       	rjmp	.+6      	; 0x14a <UartSendByte+0x40>
 144:	86 b3       	in	r24, 0x16	; 22
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	88 bb       	out	0x18, r24	; 24
 14a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <TX_BUFF>
 14e:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <TX_BUFF+0x1>
 152:	96 95       	lsr	r25
 154:	87 95       	ror	r24
 156:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <TX_BUFF+0x1>
 15a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <TX_BUFF>
 15e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <num_tx_bits>
 162:	81 50       	subi	r24, 0x01	; 1
 164:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <num_tx_bits>
 168:	c8 df       	rcall	.-112    	; 0xfa <CycleSleep>
 16a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <receiving>
 16e:	81 11       	cpse	r24, r1
 170:	04 c0       	rjmp	.+8      	; 0x17a <UartSendByte+0x70>
 172:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <num_tx_bits>
 176:	81 11       	cpse	r24, r1
 178:	db cf       	rjmp	.-74     	; 0x130 <UartSendByte+0x26>
 17a:	08 95       	ret

0000017c <UartSend>:
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	4f ef       	ldi	r20, 0xFF	; 255
 186:	46 0f       	add	r20, r22
 188:	66 23       	and	r22, r22
 18a:	61 f0       	breq	.+24     	; 0x1a4 <UartSend+0x28>
 18c:	ec 01       	movw	r28, r24
 18e:	04 2f       	mov	r16, r20
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	0f 5f       	subi	r16, 0xFF	; 255
 194:	1f 4f       	sbci	r17, 0xFF	; 255
 196:	08 0f       	add	r16, r24
 198:	19 1f       	adc	r17, r25
 19a:	89 91       	ld	r24, Y+
 19c:	b6 df       	rcall	.-148    	; 0x10a <UartSendByte>
 19e:	c0 17       	cp	r28, r16
 1a0:	d1 07       	cpc	r29, r17
 1a2:	d9 f7       	brne	.-10     	; 0x19a <UartSend+0x1e>
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <UartReceive>:
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	8c 01       	movw	r16, r24
 1be:	c6 2f       	mov	r28, r22
 1c0:	0f 2e       	mov	r0, r31
 1c2:	f4 e6       	ldi	r31, 0x64	; 100
 1c4:	cf 2e       	mov	r12, r31
 1c6:	d1 2c       	mov	r13, r1
 1c8:	e1 2c       	mov	r14, r1
 1ca:	f1 2c       	mov	r15, r1
 1cc:	f0 2d       	mov	r31, r0
 1ce:	3e c0       	rjmp	.+124    	; 0x24c <UartReceive+0x9e>
 1d0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <rx_circ_tail>
 1d4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <rx_circ_tail+0x1>
 1d8:	a0 91 65 00 	lds	r26, 0x0065	; 0x800065 <rx_circ_tail+0x2>
 1dc:	b0 91 66 00 	lds	r27, 0x0066	; 0x800066 <rx_circ_tail+0x3>
 1e0:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <rx_circ_head>
 1e4:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <rx_circ_head+0x1>
 1e8:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <rx_circ_head+0x2>
 1ec:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <rx_circ_head+0x3>
 1f0:	84 17       	cp	r24, r20
 1f2:	95 07       	cpc	r25, r21
 1f4:	a6 07       	cpc	r26, r22
 1f6:	b7 07       	cpc	r27, r23
 1f8:	49 f1       	breq	.+82     	; 0x24c <UartReceive+0x9e>
 1fa:	ac 01       	movw	r20, r24
 1fc:	bd 01       	movw	r22, r26
 1fe:	4f 5f       	subi	r20, 0xFF	; 255
 200:	5f 4f       	sbci	r21, 0xFF	; 255
 202:	6f 4f       	sbci	r22, 0xFF	; 255
 204:	7f 4f       	sbci	r23, 0xFF	; 255
 206:	40 93 63 00 	sts	0x0063, r20	; 0x800063 <rx_circ_tail>
 20a:	50 93 64 00 	sts	0x0064, r21	; 0x800064 <rx_circ_tail+0x1>
 20e:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <rx_circ_tail+0x2>
 212:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <rx_circ_tail+0x3>
 216:	fc 01       	movw	r30, r24
 218:	ee 58       	subi	r30, 0x8E	; 142
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	80 81       	ld	r24, Z
 21e:	f8 01       	movw	r30, r16
 220:	80 83       	st	Z, r24
 222:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <rx_circ_tail>
 226:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <rx_circ_tail+0x1>
 22a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <rx_circ_tail+0x2>
 22e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <rx_circ_tail+0x3>
 232:	a7 01       	movw	r20, r14
 234:	96 01       	movw	r18, r12
 236:	c6 d0       	rcall	.+396    	; 0x3c4 <__udivmodsi4>
 238:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <rx_circ_tail>
 23c:	70 93 64 00 	sts	0x0064, r23	; 0x800064 <rx_circ_tail+0x1>
 240:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <rx_circ_tail+0x2>
 244:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <rx_circ_tail+0x3>
 248:	0f 5f       	subi	r16, 0xFF	; 255
 24a:	1f 4f       	sbci	r17, 0xFF	; 255
 24c:	c1 50       	subi	r28, 0x01	; 1
 24e:	00 f6       	brcc	.-128    	; 0x1d0 <UartReceive+0x22>
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	08 95       	ret

00000260 <__vector_10>:
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	4f 93       	push	r20
 270:	5f 93       	push	r21
 272:	6f 93       	push	r22
 274:	7f 93       	push	r23
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
 286:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <starting>
 28a:	88 23       	and	r24, r24
 28c:	61 f0       	breq	.+24     	; 0x2a6 <__vector_10+0x46>
 28e:	88 e6       	ldi	r24, 0x68	; 104
 290:	89 bd       	out	0x29, r24	; 41
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <receiving>
 298:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <starting>
 29c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <RX_BUFF+0x1>
 2a0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <RX_BUFF>
 2a4:	50 c0       	rjmp	.+160    	; 0x346 <__vector_10+0xe6>
 2a6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <receiving>
 2aa:	88 23       	and	r24, r24
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <__vector_10+0x50>
 2ae:	4b c0       	rjmp	.+150    	; 0x346 <__vector_10+0xe6>
 2b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 2ba:	c0 91 6d 00 	lds	r28, 0x006D	; 0x80006d <RX_BUFF>
 2be:	d0 91 6e 00 	lds	r29, 0x006E	; 0x80006e <RX_BUFF+0x1>
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	c8 de       	rcall	.-624    	; 0x56 <readPin>
 2c6:	d6 95       	lsr	r29
 2c8:	c7 95       	ror	r28
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	96 95       	lsr	r25
 2ce:	98 2f       	mov	r25, r24
 2d0:	88 27       	eor	r24, r24
 2d2:	97 95       	ror	r25
 2d4:	87 95       	ror	r24
 2d6:	8c 2b       	or	r24, r28
 2d8:	9d 2b       	or	r25, r29
 2da:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <RX_BUFF+0x1>
 2de:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <RX_BUFF>
 2e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2e6:	88 30       	cpi	r24, 0x08	; 8
 2e8:	70 f1       	brcs	.+92     	; 0x346 <__vector_10+0xe6>
 2ea:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <receiving>
 2ee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 2f2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <rx_circ_head>
 2f6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <rx_circ_head+0x1>
 2fa:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <rx_circ_head+0x2>
 2fe:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <rx_circ_head+0x3>
 302:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <RX_BUFF>
 306:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <RX_BUFF+0x1>
 30a:	fc 01       	movw	r30, r24
 30c:	ee 58       	subi	r30, 0x8E	; 142
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	20 83       	st	Z, r18
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	6f 5f       	subi	r22, 0xFF	; 255
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	8f 4f       	sbci	r24, 0xFF	; 255
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	24 e6       	ldi	r18, 0x64	; 100
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	4e d0       	rcall	.+156    	; 0x3c4 <__udivmodsi4>
 328:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <rx_circ_head>
 32c:	70 93 68 00 	sts	0x0068, r23	; 0x800068 <rx_circ_head+0x1>
 330:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <rx_circ_head+0x2>
 334:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <rx_circ_head+0x3>
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	8a bf       	out	0x3a, r24	; 58
 33c:	8b b7       	in	r24, 0x3b	; 59
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	8b bf       	out	0x3b, r24	; 59
 342:	88 e0       	ldi	r24, 0x08	; 8
 344:	86 bb       	out	0x16, r24	; 22
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <writeEEPROM>:
 36c:	1c ba       	out	0x1c, r1	; 28
 36e:	41 15       	cp	r20, r1
 370:	51 05       	cpc	r21, r1
 372:	81 f0       	breq	.+32     	; 0x394 <writeEEPROM+0x28>
 374:	fb 01       	movw	r30, r22
 376:	46 0f       	add	r20, r22
 378:	57 1f       	adc	r21, r23
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	e1 99       	sbic	0x1c, 1	; 28
 380:	fe cf       	rjmp	.-4      	; 0x37e <writeEEPROM+0x12>
 382:	3f bb       	out	0x1f, r19	; 31
 384:	2e bb       	out	0x1e, r18	; 30
 386:	81 91       	ld	r24, Z+
 388:	8d bb       	out	0x1d, r24	; 29
 38a:	e2 9a       	sbi	0x1c, 2	; 28
 38c:	e1 9a       	sbi	0x1c, 1	; 28
 38e:	e4 17       	cp	r30, r20
 390:	f5 07       	cpc	r31, r21
 392:	a9 f7       	brne	.-22     	; 0x37e <writeEEPROM+0x12>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	08 95       	ret

0000039a <UartInit>:
 39a:	1d b8       	out	0x0d, r1	; 13
 39c:	b9 9a       	sbi	0x17, 1	; 23
 39e:	c1 9a       	sbi	0x18, 1	; 24
 3a0:	08 95       	ret

000003a2 <main>:
 3a2:	f8 94       	cli
 3a4:	c2 e0       	ldi	r28, 0x02	; 2
 3a6:	c5 bf       	out	0x35, r28	; 53
 3a8:	ba 98       	cbi	0x17, 2	; 23
 3aa:	80 e4       	ldi	r24, 0x40	; 64
 3ac:	8a bf       	out	0x3a, r24	; 58
 3ae:	8b b7       	in	r24, 0x3b	; 59
 3b0:	80 64       	ori	r24, 0x40	; 64
 3b2:	8b bf       	out	0x3b, r24	; 59
 3b4:	78 94       	sei
 3b6:	f1 df       	rcall	.-30     	; 0x39a <UartInit>
 3b8:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
 3bc:	bb 9a       	sbi	0x17, 3	; 23
 3be:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <receiving>
 3c2:	1e d2       	rcall	.+1084   	; 0x800 <program1>

000003c4 <__udivmodsi4>:
 3c4:	a1 e2       	ldi	r26, 0x21	; 33
 3c6:	1a 2e       	mov	r1, r26
 3c8:	aa 1b       	sub	r26, r26
 3ca:	bb 1b       	sub	r27, r27
 3cc:	fd 01       	movw	r30, r26
 3ce:	0d c0       	rjmp	.+26     	; 0x3ea <__udivmodsi4_ep>

000003d0 <__udivmodsi4_loop>:
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	ee 1f       	adc	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	a2 17       	cp	r26, r18
 3da:	b3 07       	cpc	r27, r19
 3dc:	e4 07       	cpc	r30, r20
 3de:	f5 07       	cpc	r31, r21
 3e0:	20 f0       	brcs	.+8      	; 0x3ea <__udivmodsi4_ep>
 3e2:	a2 1b       	sub	r26, r18
 3e4:	b3 0b       	sbc	r27, r19
 3e6:	e4 0b       	sbc	r30, r20
 3e8:	f5 0b       	sbc	r31, r21

000003ea <__udivmodsi4_ep>:
 3ea:	66 1f       	adc	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	88 1f       	adc	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	1a 94       	dec	r1
 3f4:	69 f7       	brne	.-38     	; 0x3d0 <__udivmodsi4_loop>
 3f6:	60 95       	com	r22
 3f8:	70 95       	com	r23
 3fa:	80 95       	com	r24
 3fc:	90 95       	com	r25
 3fe:	9b 01       	movw	r18, r22
 400:	ac 01       	movw	r20, r24
 402:	bd 01       	movw	r22, r26
 404:	cf 01       	movw	r24, r30
 406:	08 95       	ret

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>
